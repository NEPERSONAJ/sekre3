require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');

const token = process.env.REACT_APP_TG_BOT_TOKEN;
const webAppUrl = process.env.WEBAPP_URL;
const requiredChannels = [
    process.env.REQUIRED_CHANNEL_1 || '@chatgptiru',
    process.env.REQUIRED_CHANNEL_2 || '@GPTinsider'
];

const bot = new TelegramBot(token, { polling: true });
const app = express();

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.on('error', (error) => {
    console.error('Server error:', error);
});

app.use(express.json());
app.use(cors());

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
    console.log('Headers:', req.headers);
    console.log('Query:', req.query);
    if (req.method === 'POST') {
        console.log('Body:', req.body);
    }
    next();
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ–π
console.log('Current directory:', __dirname);
console.log('Build path:', path.join(__dirname, 'build'));
console.log('Index path:', path.join(__dirname, 'build', 'index.html'));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(path.join(__dirname, 'build')));

const emojis = {
    wave: 'üëã',
    sparkles: '‚ú®',
    robot: 'ü§ñ',
    palette: 'üé®',
    magic: 'ü™Ñ',
    star: '‚≠êÔ∏è',
    rocket: 'üöÄ',
    lock: 'üîí',
    unlock: 'üîì',
    check: '‚úÖ',
    warning: '‚ö†Ô∏è',
    idea: 'üí°',
    brain: 'üß†',
    art: 'üé≠',
    image: 'üñºÔ∏è',
    chat: 'üí≠'
};

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
const getSubscriptionKeyboard = () => {
    return {
        inline_keyboard: [
            ...requiredChannels.map(channel => [{
                text: `${emojis.star} –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ ${channel}`,
                url: `https://t.me/${channel.slice(1)}`
            }]),
            [{ text: `${emojis.check} –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É`, callback_data: 'check_subscription' }]
        ]
    };
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
async function checkSubscription(chatId, userId) {
    try {
        console.log(`Checking subscription for user ${userId}`);
        for (const channel of requiredChannels) {
            try {
                console.log(`Checking channel ${channel}`);
                const member = await bot.getChatMember(channel, userId);
                console.log(`Status for ${channel}:`, member.status);
                if (!['creator', 'administrator', 'member'].includes(member.status)) {
                    console.log(`User ${userId} is not subscribed to ${channel}`);
                    return false;
                }
                console.log(`User ${userId} is subscribed to ${channel}`);
            } catch (error) {
                console.error(`Error checking channel ${channel}:`, error.message);
                return false;
            }
        }
        console.log(`All subscriptions confirmed for user ${userId}`);
        return true;
    } catch (error) {
        console.error(`General error checking subscription:`, error.message);
        return false;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const firstName = msg.from.first_name;
    
    console.log(`/start command received from user ${userId}`);
    
    const welcomeMessage = `
${emojis.wave} –ü—Ä–∏–≤–µ—Ç, ${firstName}!

${emojis.sparkles} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChatGPTi - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!

${emojis.brain} –° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ:
‚Ä¢ ${emojis.chat} –û–±—â–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º
‚Ä¢ ${emojis.idea} –ü–æ–ª—É—á–∞—Ç—å –ø–æ–º–æ—â—å –≤ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á
‚Ä¢ ${emojis.palette} –°–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ ${emojis.art} –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ç—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö
‚Ä¢ ${emojis.magic} –ü—Ä–µ–≤—Ä–∞—â–∞—Ç—å –≤–∞—à–∏ –∏–¥–µ–∏ –≤ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —à–µ–¥–µ–≤—Ä—ã

${emojis.robot} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–ª—É –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á!

${emojis.lock} –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º ChatGPTi, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:`;

    const subscriptionMessage = `\n${emojis.rocket} –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º ChatGPTi`;
    
    const isSubscribed = await checkSubscription(chatId, userId);
    
    if (isSubscribed) {
        console.log(`User ${userId} is already subscribed`);
        bot.sendMessage(chatId, 
            `${welcomeMessage}\n\n${emojis.unlock} –û—Ç–ª–∏—á–Ω–æ! –£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ ChatGPTi!\n\n${emojis.sparkles} –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:`, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [[{
                    text: `${emojis.palette} –û—Ç–∫—Ä—ã—Ç—å ChatGPTi`,
                    callback_data: 'open_app'
                }]]
            }
        });
    } else {
        console.log(`User ${userId} needs to subscribe`);
        const channelLinks = requiredChannels.map(channel => 
            `‚Ä¢ <a href="https://t.me/${channel.slice(1)}">${channel}</a>`
        ).join('\n');
        
        bot.sendMessage(chatId, 
            `${welcomeMessage}\n\n${channelLinks}${subscriptionMessage}`, 
            { 
                parse_mode: 'HTML',
                reply_markup: getSubscriptionKeyboard(),
                disable_web_page_preview: true
            }
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const userId = query.from.id;
    
    console.log(`Callback query received: ${query.data} from user ${userId}`);

    if (query.data === 'check_subscription') {
        const isSubscribed = await checkSubscription(chatId, userId);
        
        if (isSubscribed) {
            console.log(`User ${userId} subscription confirmed`);
            await bot.deleteMessage(chatId, query.message.message_id);
            bot.sendMessage(chatId, `
${emojis.unlock} –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç! 

${emojis.sparkles} –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º ChatGPTi.

${emojis.rocket} –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:`, {
                reply_markup: {
                    inline_keyboard: [[{
                        text: `${emojis.palette} –û—Ç–∫—Ä—ã—Ç—å ChatGPTi`,
                        callback_data: 'open_app'
                    }]]
                }
            });
        } else {
            console.log(`User ${userId} subscription check failed`);
            await bot.answerCallbackQuery({
                callback_query_id: query.id,
                text: '‚ùå –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                show_alert: true
            });
        }
    } else if (query.data === 'open_app') {
        const isSubscribed = await checkSubscription(chatId, userId);
        
        if (isSubscribed) {
            console.log(`Opening web app for user ${userId}`);
            await bot.editMessageText(`${emojis.sparkles} ChatGPTi –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`, {
                chat_id: chatId,
                message_id: query.message.message_id,
                reply_markup: {
                    inline_keyboard: [[{
                        text: `${emojis.palette} –û—Ç–∫—Ä—ã—Ç—å ChatGPTi`,
                        web_app: { url: webAppUrl }
                    }]]
                }
            });
        } else {
            console.log(`Access denied for user ${userId}`);
            const channelLinks = requiredChannels.map(channel => 
                `<a href="https://t.me/${channel.slice(1)}">${channel}</a>`
            ).join(' –∏ ');
            
            bot.editMessageText(
                `${emojis.warning} –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n${channelLinks}\n\n‚ùóÔ∏è –í–∞–∂–Ω–æ: –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–ª—å–∑—è –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–æ–≤`,
                {
                    chat_id: chatId,
                    message_id: query.message.message_id,
                    parse_mode: 'HTML',
                    reply_markup: getSubscriptionKeyboard(),
                    disable_web_page_preview: true
                }
            );
        }
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
    res.status(200).json({ status: 'ok' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-—Ö—É–∫–æ–≤
app.post('/web-data', async (req, res) => {
    const { queryId } = req.body;
    console.log('Received web-data request:', req.body);
    
    try {
        await bot.answerWebAppQuery(queryId, {
            type: 'article',
            id: queryId,
            title: '–£—Å–ø–µ—à–Ω–æ',
            input_message_content: {
                message_text: `${emojis.sparkles} –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!`
            }
        });
        return res.status(200).json({});
    } catch (error) {
        console.error('Error handling web-data:', error);
        await bot.answerWebAppQuery(queryId, {
            type: 'article',
            id: queryId,
            title: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
            input_message_content: {
                message_text: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            }
        });
        return res.status(500).json({});
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.get('*', (req, res) => {
    const indexPath = path.join(__dirname, 'build', 'index.html');
    console.log('Serving index.html from:', indexPath);
    
    if (!fs.existsSync(indexPath)) {
        console.error('index.html not found at:', indexPath);
        return res.status(404).send('index.html not found');
    }
    
    res.sendFile(indexPath);
});

// –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
const PORT = 3003;
app.listen(PORT, () => {
    console.log(`${emojis.rocket} Server started on PORT ${PORT}`);
    console.log(`${emojis.sparkles} ChatGPTi Bot is running...`);
});